@page "/tickets/create"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using NuGet.Packaging
@using SalesBook.Models
@using SalesBook.Data
@using SalesBook.Utility
@using System.Collections.ObjectModel
@using System.ComponentModel
@rendermode InteractiveServer
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Ticket</h2>
<hr />
<div class="row">
    <div class="col-md-12">
                    <EditForm method="post" Model="Ticket" OnValidSubmit="AddTicket" FormName="create" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Ticket.Id" value="@Ticket.Id" />
		<div class="row mb-3">
                <div class="mb-3 col-md-4">
                    <label for="tablenumber" class="form-label">TableNumber:</label>
                    <InputNumber id="tablenumber" @bind-Value="Ticket.TableNumber" class="form-control" />
                    <ValidationMessage For="() => Ticket.TableNumber" class="text-danger" />
                </div>
                <div class="mb-3 col-md-4">
                    <label for="clientname" class="form-label">ClientName:</label>
                    <InputText id="clientname" @bind-Value="Ticket.ClientName" class="form-control" />
                    <ValidationMessage For="() => Ticket.ClientName" class="text-danger" />
                </div>
                <div class="mb-3 d-none col-md-2">
                    <label for="createdat" class="form-label">CreatedAt:</label>
                    <InputDate id="createdat" @bind-Value="Ticket.CreatedAt" class="form-control" />
                    <ValidationMessage For="() => Ticket.CreatedAt" class="text-danger" />
                </div>
                <div class="mb-3 d-none col-md-2">
                    <label for="updatedat" class="form-label">UpdatedAt:</label>
                    <InputDate id="updatedat" @bind-Value="Ticket.UpdatedAt" class="form-control" />
                    <ValidationMessage For="() => Ticket.UpdatedAt" class="text-danger" />
                </div>
		</div>
		<div class="row mb-10">
			
		</div>
		@if(display is not null )
		{
           	<div class="row    mt-3">
				@foreach(var entry in display)
				{
					@if(entry is not null && @entry._item is not null)
					{
						<div class="@($"col-1 d-flex flex-row border border-{GetColor(entry)} mx-2")" 
										@onmousedown="StartClick" @onmouseup="(e) => EndClick(e, entry)"
										@onclick="(e) => HandleClick(e, entry)">
							<div class="flex-grow-1">
								@entry._item.Abbreviation
							</div>
							<div class="@($" px-1 bg-{GetColor(entry)} text-white fw-bold")">
								@entry._count
							</div>
						</div>
					}
				}		
			</div>
		}
                <hr/>
			@if(records is not null)
			{
<QuickGrid Items="@records.AsQueryable()" Class="table table-striped" >
					
                    <TemplateColumn Context="record" Title="Item Name">
                        @if(record.Item is not null){
                            <div>@record.Item.ItemName</div>
                        }
                    </TemplateColumn>
                    <PropertyColumn Property="record => record.Quantity" />
                    <TemplateColumn Context="record">
                        @if(record.Item is not null){
                            <div>@record.Item.PricePerUnit</div>
                        }
                    </TemplateColumn>
                    <TemplateColumn Context="record" Title="Individual Totals">
                        @if(record.Item is not null){
                            <div>@(record.Item.PricePerUnit * record.Quantity )</div>
                        }
                    </TemplateColumn>

				</QuickGrid>
			}
                <button type="submit" class="btn btn-primary">Save</button>
        </EditForm>
    </div>
</div>

<div class="mt-5">
    <a href="/tickets">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
     private Ticket Ticket{get; set;} = new();

	private ICollection<Order>? records ;
	private ICollection<Item> Items = new List<Item>();
	private ICollection<Display>? display ;
	protected override void OnInitialized()
	{
		using var context = DbFactory.CreateDbContext();
		Items = context.Items.ToList();
		PopulateDisplay();
	}
	public void InitRecords(){
		if(records is null) records = new  List<Order>();
	}
 
    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddTicket()
    {
		try
		{
			using var context = DbFactory.CreateDbContext();
			context.Tickets.Add(Ticket);
			await context.SaveChangesAsync();

			if(records is not null)
			{
				foreach(var order in records){
					order.TicketId = Ticket.Id;

				}
			}
			Ticket.Orders.AddRange(records);
			await context.SaveChangesAsync();
		} catch(Exception ex){
			Console.WriteLine($"error adding Ticket : {ex.Message}");
		}
        NavigationManager.NavigateTo("/tickets");
	}

    public void PopulateDisplay()
	{
		display = new List<Display>();
		if(Items is not null){
			foreach(var item in Items)
			{
				display.Add(new Display{
					_item = item,
					_count = 0
				});
			}
		}
	}
	private bool isLongClick;
	private DateTime mouseDownTime;
	private const int LongClickThreshold = 500;
	public void StartClick()
	{
		mouseDownTime = DateTime.Now;
		isLongClick = false;
	}
	public void EndClick(MouseEventArgs e, Display d)
	{
	
		var duration = (DateTime.Now - mouseDownTime).TotalMilliseconds;
		isLongClick = duration >= LongClickThreshold;
		if(isLongClick)
		{
			d._increase = !d._increase;
		}			
	}
	public void HandleClick(MouseEventArgs e, Display d)
	{
		if(isLongClick){
			isLongClick = !isLongClick;
			return;
		}

		if(d._count == 0 && !d._increase) return;

		d._count = d._increase ? d._count + 1 : d._count -= 1;
		
		if(d._count > 0 && d._item is not null){
			var currentRecord = new Order();
			if(records is null) InitRecords();
			if(records is not null)
				currentRecord = records.FirstOrDefault(r => r.Item == d._item);
			if(currentRecord is not null && records is not null)
			{
					records.Remove(currentRecord);
					currentRecord.Quantity = d._count;
					records.Add(currentRecord);
			}else{
				var item = Items.FirstOrDefault(i => i.Id ==d._item.Id);
				if(records is not null && Items is not null && item is not null)
					records.Add(new Order{
						Item = item ,
						Quantity = d._count
					});
			}
		}
	}
	public string GetColor(Display d ){
		if(d._increase){
			return "primary";
		}
		return "danger";
	}
}
