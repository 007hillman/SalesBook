@page "/tickets/details"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using SalesBook.Models
@using SalesBook.Data
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Ticket</h2>
    <hr />
    @if (ticket is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Table Number</dt>
            <dd class="col-sm-10">@ticket.TableNumber</dd>
            <dt class="col-sm-2">Client Name</dt>
            <dd class="col-sm-10">@ticket.ClientName</dd>
            <dt class="col-sm-2">Date Issued :</dt>
            <dd class="col-sm-10">@ticket.CreatedAt</dd>
            <dt class="col-sm-2">Date Changed : </dt>
            <dd class="col-sm-10">@ticket.UpdatedAt</dd>
        </dl>
        <div>
            <a href="@($"/tickets/edit?id={ticket.Id}")">Edit</a> |
            <a href="@($"/tickets")">Back to List</a>
        </div>
    @if(ticket.Orders is not null && ticket.Orders.ToList().Count > 0)
    {
         <table class="table table-striped">
		<thead>
			<td>Item Name : </td>
            <td>Quantity : </td>
            <td>Unit price : </td>
            <td>Total Price : </td>
		</thead>
		<tbody>
            @foreach(var order in ticket.Orders.ToList())
            {
                @if(@order.Item is not null)
                {
                <tr>
                    <td>@order.Item.ItemName</td>
                    <td>@order.Quantity</td>
                    <td>@order.Item.PricePerUnit</td>
                    <td>@(order.Item.PricePerUnit * order.Quantity)</td>
                </tr>
                }
            }
		</tbody>
	</table>

    }
    }
</div>

@code {
    private Ticket? ticket;
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    
    private ICollection<Item> Items = new List<Item>(); 
    protected override async Task OnInitializedAsync()
    {
	    	using var context = DbFactory.CreateDbContext();
        	ticket = await context.Tickets
            .Include(t => t.Orders)
            .ThenInclude(o => o.Item)
            .FirstOrDefaultAsync(t => t.Id == Id);
        	if (ticket is null)
        	{
            		NavigationManager.NavigateTo("notfound");
        	}
    }
}
