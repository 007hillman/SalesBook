@page "/tickets/edit"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using SalesBook.Models
@using SalesBook.Utility
@using SalesBook.Data
@rendermode InteractiveServer
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Ticket</h2>
<hr />
@if (Ticket is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-10">
            <EditForm method="post" Model="Ticket" OnValidSubmit="UpdateTicket" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                
                <div class="row">
                <input type="hidden" name="Ticket.Id" value="@Ticket.Id" />
                <div class="mb-3 col-sm-6">
                    <label for="tablenumber" class="form-label fw-semibold">Table Number:</label>
                    <InputNumber id="tablenumber" @bind-Value="Ticket.TableNumber" class="form-control" />
                    <ValidationMessage For="() => Ticket.TableNumber" class="text-danger" />
                </div>
                <div class="mb-3 col-sm-6">
                    <label for="clientname" class="form-label fw-semibold">Client Name:</label>
                    <InputText id="clientname" @bind-Value="Ticket.ClientName" class="form-control" />
                    <ValidationMessage For="() => Ticket.ClientName" class="text-danger" />
                </div>
                <div class="mb-3 col-sm-6">
                    <label for="amountpaid" class="form-label fw-semibold">Amount given by client :</label>
                    <InputNumber id="amountpaid" @bind-Value="Ticket.AmountPaid" class="form-control" @onchange="CalculateChange"/>
                    <ValidationMessage For="() => Ticket.AmountPaid" class="text-danger" />
                </div>

                <div class="mb-3 col-sm-6 pt-4">
                    <InputCheckbox id="transactioncompleted" @bind-Value="Ticket.TransactionCompleted" type="checkbox" class="form-check-input" />
                    <label for="transactioncompleted" class="form-check-label fw-semibold">Transaction Completed?</label>
                    <ValidationMessage For="() => Ticket.TransactionCompleted" class="text-danger" />
                </div>
                <div class="mb-3 d-none">
                    <label for="createdat" class="form-label">CreatedAt:</label>
                    <InputDate id="createdat" @bind-Value="Ticket.CreatedAt" class="form-control" />
                    <ValidationMessage For="() => Ticket.CreatedAt" class="text-danger" />
                </div>
                <div class="mb-3 d-none">
                    <label for="updatedat" class="form-label">UpdatedAt:</label>
                    <InputDate id="updatedat" @bind-Value="Ticket.UpdatedAt" class="form-control" />
                    <ValidationMessage For="() => Ticket.UpdatedAt" class="text-danger" />
                </div>
            </div>


	@if(display is not null )
		{
           	<div class="row   mt-5">
				@foreach(var entry in display)
				{
					@if(entry is not null && @entry._item is not null)
					{
						<div class="@($"col-1 d-flex flex-row  border border-{GetColor(entry)} mx-2")" 
										@onmousedown="StartClick" @onmouseup="(e) => EndClick(e, entry)"
										@onclick="(e) => HandleClick(e, entry)">
							<div class="flex-grow-1 py-2">
								@entry._item.Abbreviation
							</div>
							<div class="@($" px-2  bg-{GetColor(entry)} text-white fw-bold fs-4")">
								@entry._count
							</div>
						</div>
					}
				}		
			</div>
		}
        	
                <hr/>
			@if(records is not null)
			{
                <QuickGrid Items="@records.AsQueryable()" Class="table table-striped">
                    <TemplateColumn Context="record" Title="Item Name">
                        @if(record.Item is not null){
                            <div>@record.Item.ItemName</div>
                        }
                    </TemplateColumn>
                    <PropertyColumn Property="record => record.Quantity" />
                    <TemplateColumn Context="record" Title="Unit Price">
                        @if(record.Item is not null){
                            <div>@record.Item.PricePerUnit</div>
                        }
                    </TemplateColumn>
                    <TemplateColumn Context="record" Title="Individual Totals">
                        @if(record.Item is not null){
                            <div>@(record.Item.PricePerUnit * record.Quantity )</div>
                        }
                    </TemplateColumn>
				</QuickGrid>
                <div class="row mb-5 fw-bold fs-3">
                    <div class="col-sm-8">TOTAL :</div>
                    <div class="col-sm-2">
                        @GetReceiptTotal()
                    </div>
                </div>
			}
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/tickets">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Ticket? Ticket { get; set; }
    private decimal calculatedDifference {get; set;}

	//private ICollection<Order>? Ticket.Orders.ToList() ;
	private ICollection<Item> Items = new List<Item>();
	private ICollection<Display>? display ;
    private ICollection<Order>? records ;    
    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Items = context.Items.ToList();
        Ticket ??= await context.Tickets.Include(t => t.Orders)
                                .ThenInclude( o => o.Item).FirstOrDefaultAsync(m => m.Id == Id);

        if (Ticket is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        InitRecords();
        PopulateDisplay();
        CalculateChange();

    }
    public void InitRecords(){
        if(Ticket is not null && Ticket.Orders.ToList() is not null)
            records = Ticket.Orders.ToList();
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateTicket()
    {
        if(Ticket is not null)
        {
            Ticket.UpdatedAt = DateTime.UtcNow + TimeSpan.FromHours(1);
            using var context = DbFactory.CreateDbContext();
            var ticket = await context.Tickets.Include(t => t.Orders).FirstOrDefaultAsync( t => t.Id == Id);
            if(ticket is not null && records != null)
            {
                context.Entry(ticket).CurrentValues.SetValues(Ticket);
                var ordersToRemove = ticket.Orders.Where(order => !records.Any(r => r.Id == order.Id)).ToList();
                context.Orders.RemoveRange(ordersToRemove);
                
                var newOrders = records.Where( r => r.Id == 0 ).ToList();
                foreach(var order in newOrders){
                    ticket.Orders.Add(order);
                }
                foreach(var upOrder in records.Where(r => r.Id != 0)){
                    var existingOrder = ticket.Orders.FirstOrDefault( or => or.Id == upOrder.Id);
                    if(existingOrder != null){
                        context.Entry(existingOrder).CurrentValues.SetValues(upOrder);
                    }
                }
            }
            await context.SaveChangesAsync();
        }
        NavigationManager.NavigateTo($"/tickets/details?id={Id}");
    }

    private bool TicketExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Tickets.Any(e => e.Id == id);
    }

        private void AddItem()
	{
		
	}
    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.

    public void RemoveRecord(Order rec)
	{

	}
    public void PopulateDisplay()
	{
        display = new List<Display>();
		if(Items is not null){
			foreach(var item in Items)
			{
                var count = 0;
                if(Ticket is not null && Ticket.Orders.Any(o => o.ItemId == item.Id)){
                    var order = Ticket.Orders.FirstOrDefault( o => o.ItemId == item.Id);
                    if(order is not null)
                        count = (int)order.Quantity;
                }
				display.Add(new Display{
					_item = item,
					_count = count
				});
			}
		}
	}
	private bool isLongClick;
	private DateTime mouseDownTime;
	private const int LongClickThreshold = 500;
	public void StartClick()
	{
		mouseDownTime = DateTime.Now;
		isLongClick = false;
	}
	public void EndClick(MouseEventArgs e, Display d)
	{
	
		var duration = (DateTime.Now - mouseDownTime).TotalMilliseconds;
		isLongClick = duration >= LongClickThreshold;
		if(isLongClick)
		{
			d._increase = !d._increase;
		}			
	}
	public void HandleClick(MouseEventArgs e, Display d)
	{
		if(isLongClick){
			isLongClick = !isLongClick;
			return;
		}
		var currentRecord = new Order();
		
        if(records is not null) 
			currentRecord = records.FirstOrDefault(r => r.Item == d._item);
		
        if(d._count == 0 && !d._increase) return;

		d._count = d._increase ? d._count + 1 : d._count -= 1;
		
		if(d._count > 0 && d._item is not null){

			if( currentRecord is not null && records is not null)
			{
					records.FirstOrDefault( r => r == currentRecord).Quantity = d._count;
			}else{
				var item = Items.FirstOrDefault(i => i.Id ==d._item.Id);
				if(records != null && Items is not null && item is not null)
					records.Add(new Order{
						Item = item ,
						Quantity = d._count,
                        Ticket = Ticket
					});
			}
		}else{
            if(records!= null && currentRecord != null)
                records.Remove(currentRecord);
        }
	}
	public string GetColor(Display d ){
		if(d._increase){
			return "primary";
		}
		return "danger";
	}
    public decimal GetReceiptTotal(){
        decimal total = 0.0M;
        if(records != null)
        {
            foreach(var record in records){
                if(record.Item != null)
                    total += record.Item.PricePerUnit * (decimal)record.Quantity;
            }
        }
        return total;
    }
    public void CalculateChange(){
        if(Ticket != null)
            calculatedDifference = Ticket.AmountPaid - GetReceiptTotal();
    }
}

